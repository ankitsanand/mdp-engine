#!/usr/bin/env python

problem = "sailing"
microtask_number = 1
microtask_file = problem + "_mutask_"

def frange(start, end, step):
   return map(lambda x: x*step, range(int(start*1./step), int(end*1./step)))

def open_file():
    f = open(microtask_file + str(microtask_number), 'w')
    f.write('#!/usr/bin/env python\n')
    f.write('import os\n')
    f.write('output = open("output.' + microtask_file + str(microtask_number) + '", "w")\n')
    f.write('cmd = "./' + problem + '  -a 1 -h 1 ')
    return f

def close_file(f):
    global microtask_number
    f.write('"\n')
    f.write('output.write("cmd=" + cmd)\n')
    f.write('output.close()\n')
    f.write('os.system(cmd + " >> output.' + microtask_file + str(microtask_number) + '")\n')
    f.close()
    microtask_number += 1

for sz in range(10, 100, 10):
    for p in range(1, 10):
        if p == 1 or p == 2 or p == 5 or p == 6 or p == 9: # plain algorithms
            f = open_file()
            f.write(' ' + str(sz) + '  ' + str(p) + '  0 0 0  0 0 0  50 50')
            close_file(f)
        elif p == 3 or p == 7: # Rollout
            for nesting in range(1, 3):
                f = open_file()
                f.write(' ' + str(sz) + '  ' + str(p) + '  50 50 ' + str(nesting) + '  0 0 0  0 0')
                close_file(f)
        else: # UCT
            for uct in frange(-.05, -.90, -.05):
                f = open_file()
                f.write(' ' + str(sz) + '  ' + str(p) + '  0 0 0  50 50 ' + str(uct) + '  0 0')
                close_file(f)
        


