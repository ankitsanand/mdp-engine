#!/usr/bin/env python

problem = "rect"
microtask_number = 1
microtask_file = problem + "_mutask_"

tasks = [
    '-s 0 10',
    '-s 0 100',
]

def frange(start, end, step):
    return map(lambda x: x*step, range(int(start*1./step), int(end*1./step)))

def open_file():
    f = open(microtask_file + str(microtask_number), 'w')
    f.write('#!/usr/bin/env python\n')
    f.write('import os\n')
    f.write('output = open("output.' + microtask_file + str(microtask_number) + '", "w")\n')
    f.write('cmd = "./' + problem + '  -f -a 1 -h 1 -p .70 ')
    return f

def close_file(f):
    global microtask_number
    f.write('"\n')
    f.write('output.write("cmd=" + cmd + "\\n")\n')
    f.write('output.close()\n')
    f.write('os.system(cmd + " >> output.' + microtask_file + str(microtask_number) + '")\n')
    f.close()
    microtask_number += 1

for t in tasks:
    for p in range(1, 10):
        if p == 1 or p == 2 or p == 6: # plain algorithms (1=optimal, 2=greedy, 6=random)
            f = open_file()
            f.write(t + ' ' + str(p) + ' 0 0 0 0 0 0 50 50')
            close_file(f)
        else:
            for w in range(20, 220, 20):
                if p == 3 or p == 7: # Rollout
                    for nesting in range(1, 3):
                        f = open_file()
                        f.write(t + ' ' + str(p) + ' ' + str(w) + ' 50 ' + str(nesting) + ' 0 0 0 0 0')
                        close_file(f)
                elif p == 4 or p == 8: # UCT
                    for uct in frange(-.05, -1, -.1):
                        f = open_file()
                        f.write(t + ' ' + str(p) + ' 0 0 0 ' + str(w) + ' 50 ' + str(uct) + ' 0 0')
                        close_file(f)
                else: # AO
                    f = open_file()
                    f.write(t + ' ' + str(p) + ' 0 0 0 0 0 0 ' + str(w) + ' 50')
                    close_file(f)

